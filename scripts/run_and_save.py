from coast_search import utils
from coast_search.query_generator import generate_query_strings_n_dimensions, add_api_config_to_queries
from coast_search.search import append_daily_search_results
import sys
import os
import datetime
import random


from pymongo import MongoClient


def getDB(uri, name):
    """ returns a db object """
    try:
        client = MongoClient(uri)
        db = client[name]
    except Exception as e:
        print(e)
        sys.exit()
    else:
        return db


def _exit_if_not_found_in_config(param, output):
    if not param:
        print('{} not found inside config, exiting'.format(output))
        sys.exit(1)


def generate_queries(config):
    """Generates the queries defined in the config
        Also adds the api keys as required
    """
    dimensions = config.get("dimensions")
    dimensions_dict = utils.get_from_file_list(dimensions)

    _exit_if_not_found_in_config(dimensions, "dimensions")

    query_strings = generate_query_strings_n_dimensions(dimensions_dict)

    api_details_file_location = config.get("api_details_file")

    _exit_if_not_found_in_config(api_details_file_location, "api_details_file_location")

    api_details = utils.get_json_from_file(api_details_file_location)
    search_engines = api_details.get("search_engines")

    _exit_if_not_found_in_config(search_engines, "search_engines")

    queries_with_search_engines = add_api_config_to_queries(query_strings, search_engines)

    return queries_with_search_engines


def save_queries(queries, db):
    print("saving the following queries...")
    for query in queries:
        print("\t", query)
        db["queries"].insert_one(query)


def generate_and_save_queries(config, db):
    """
        Generates the queries required and saves them to the database if they do not already exists
    """
    queries_from_db = db["queries"].find({})
    if queries_from_db.count() == 0:
        generated_queries = generate_queries(config)

        save_queries(generated_queries, db)
    else:
        print("The following queries already exist, using these..")
        for query in queries_from_db:
            print("\t", query["query"])


def run_queries(config, db):
    number_of_runs = config.get("number_of_runs")
    number_of_results = config.get("number_of_results")
    search_backup_dir = config.get("search_backup_dir")
    day = utils.number_of_days_past_start_date(config)
    _exit_if_not_found_in_config(number_of_runs, "number_of_runs")
    _exit_if_not_found_in_config(number_of_results, "number_of_results")
    _exit_if_not_found_in_config(search_backup_dir, "search_backup_dir")

    queries_to_run = db["queries"].find()
    print("\n\n*********************************")
    print("running queries....")
    print("*********************************\n\n")

    results = append_daily_search_results(list(queries_to_run),
                                          number_of_runs,
                                          number_of_results,
                                          day,
                                          search_backup_dir)

    return results


def save_query_results(results, db):
    """
    Saves the queries generated by the run queries function
    Adds query_batch (random number) to the search, so results from the same batch of searches can be grouped
    """

    query_batch = random.randint(1, 10**8)
    for result in results["results"]:
        print("saving result", result)
        db["results"].insert_one({
            "date": str(datetime.datetime.now()),
            "results": result,
            "query_batch": query_batch
        })


def exec():
    # DB = getDB("admin:J45m1n31234@cs15078kn.canterbury.ac.nz:27017", "jim_hpt")
    DB_URL = "mongodb://localhost:27017/test_database"
    DB_NAME = "jim_hpt"
    db = getDB(DB_URL, DB_NAME)
    print("USING DB", DB_URL, DB_NAME)

    CONFIG_FILE_PATH = os.getcwd() + "/../tests/test_data/config.json"
    print("Loading config from ...", CONFIG_FILE_PATH, "\n")
    config = utils.get_json_from_file(CONFIG_FILE_PATH)

    generate_and_save_queries(config, db)

    print("NOT RUNNING QUERY BECAUSE NOT SET UP UET")
    return
    query_results = run_queries(config, db)
    save_query_results(query_results, db)




if __name__ == '__main__':
    exec()
